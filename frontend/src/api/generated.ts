/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * GPTI Project
 * Backend API for image uploader
 * OpenAPI spec version: 1.0.0
 */
export type GetImages200ImagesItem = {
  name?: string;
  publicUrl?: string;
};

export type GetImages200 = {
  images?: GetImages200ImagesItem[];
};

export type GetImages500 = {
  error?: string;
};

export type PostUpload200 = {
  filename?: string;
  status?: string;
};

export type PostUpload400 = {
  error?: string;
};

export type getAuthGoogleResponse200 = {
  data: void
  status: 200
}
    
export type getAuthGoogleResponseComposite = getAuthGoogleResponse200;
    
export type getAuthGoogleResponse = getAuthGoogleResponseComposite & {
  headers: Headers;
}

export const getGetAuthGoogleUrl = () => {


  

  return `/auth/google`
}

export const getAuthGoogle = async ( options?: RequestInit): Promise<getAuthGoogleResponse> => {
  
  const res = await fetch(getGetAuthGoogleUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getAuthGoogleResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getAuthGoogleResponse
}



export type getAuthGoogleCallbackResponse200 = {
  data: void
  status: 200
}
    
export type getAuthGoogleCallbackResponseComposite = getAuthGoogleCallbackResponse200;
    
export type getAuthGoogleCallbackResponse = getAuthGoogleCallbackResponseComposite & {
  headers: Headers;
}

export const getGetAuthGoogleCallbackUrl = () => {


  

  return `/auth/google/callback`
}

export const getAuthGoogleCallback = async ( options?: RequestInit): Promise<getAuthGoogleCallbackResponse> => {
  
  const res = await fetch(getGetAuthGoogleCallbackUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getAuthGoogleCallbackResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getAuthGoogleCallbackResponse
}



export type getResponse200 = {
  data: void
  status: 200
}
    
export type getResponseComposite = getResponse200;
    
export type getResponse = getResponseComposite & {
  headers: Headers;
}

export const getGetUrl = () => {


  

  return `/`
}

export const get = async ( options?: RequestInit): Promise<getResponse> => {
  
  const res = await fetch(getGetUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getResponse
}



/**
 * Get list of images in bucket
 */
export type getImagesResponse200 = {
  data: GetImages200
  status: 200
}

export type getImagesResponse500 = {
  data: GetImages500
  status: 500
}
    
export type getImagesResponseComposite = getImagesResponse200 | getImagesResponse500;
    
export type getImagesResponse = getImagesResponseComposite & {
  headers: Headers;
}

export const getGetImagesUrl = () => {


  

  return `/images`
}

export const getImages = async ( options?: RequestInit): Promise<getImagesResponse> => {
  
  const res = await fetch(getGetImagesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getImagesResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getImagesResponse
}



/**
 * Upload an image to GCS
 */
export type postUploadResponse200 = {
  data: PostUpload200
  status: 200
}

export type postUploadResponse400 = {
  data: PostUpload400
  status: 400
}
    
export type postUploadResponseComposite = postUploadResponse200 | postUploadResponse400;
    
export type postUploadResponse = postUploadResponseComposite & {
  headers: Headers;
}

export const getPostUploadUrl = () => {


  

  return `/upload`
}

export const postUpload = async ( options?: RequestInit): Promise<postUploadResponse> => {
  
  const res = await fetch(getPostUploadUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postUploadResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postUploadResponse
}
